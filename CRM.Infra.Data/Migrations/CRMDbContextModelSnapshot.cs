// <auto-generated />
using System;
using CRM.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CRM.Infra.Data.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    partial class CRMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Formulario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MensagemConfirmacao")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("ModeloId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.ToTable("formularios", "formularios");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Obrigatorio")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<Guid>("SecaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.HasIndex("SecaoId");

                    b.ToTable("perguntas", "formularios");

                    b.HasDiscriminator<string>("Tipo").HasValue("Pergunta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Alternativa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.ToTable("alternativas", "formularios");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Modelo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CriadoEmUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("modelos", "formularios");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Secao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModeloId")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.ToTable("secoes", "formularios");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.Gabarito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RespondidoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("gabaritos", "formularios");

                    b.HasDiscriminator<string>("Tipo").HasValue("Gabarito");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.Resposta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GabaritoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerguntaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.HasIndex("GabaritoId", "PerguntaId")
                        .IsUnique();

                    b.ToTable("respostas", "formularios");

                    b.HasDiscriminator<string>("Tipo").HasValue("Resposta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("respostas-alternativas", b =>
                {
                    b.Property<Guid>("AlternativaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RespostaId")
                        .HasColumnType("uuid");

                    b.HasKey("AlternativaId", "RespostaId");

                    b.HasIndex("RespostaId");

                    b.ToTable("respostas-alternativas", "formularios");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.CaixaSelecao", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta");

                    b.HasDiscriminator().HasValue("CaixaSelecao");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.ListaSuspensa", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta");

                    b.HasDiscriminator().HasValue("ListaSuspensa");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.MultiplaEscolha", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta");

                    b.HasDiscriminator().HasValue("MultiplaEscolha");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.TextoCurto", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta");

                    b.Property<int?>("QuantidadeMaximaCaracteres")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<int?>("QuantidadeMinimaCaracteres")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<int?>("TipoTexto")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("TextoCurto");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.TextoLongo", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta");

                    b.Property<int?>("QuantidadeMaximaCaracteres")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<int?>("QuantidadeMinimaCaracteres")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("TextoLongo");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.FormularioGabarito", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Respostas.Gabarito");

                    b.Property<Guid>("FormularioId")
                        .HasColumnType("uuid");

                    b.HasIndex("FormularioId");

                    b.HasDiscriminator().HasValue("Formulario");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.RespostaDiscursiva", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Respostas.Resposta");

                    b.Property<string>("Texto")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasDiscriminator().HasValue("Discursiva");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.RespostaObjetiva", b =>
                {
                    b.HasBaseType("CRM.Domain.Entities.Formularios.Respostas.Resposta");

                    b.HasDiscriminator().HasValue("Objetiva");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Formulario", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("CRM.Domain.Entities.Formularios.ValueObjects.DateRange", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("FormularioId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DataInicio")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DataInicio");

                            b1.Property<DateTime?>("DataTermino")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DataTermino");

                            b1.HasKey("FormularioId");

                            b1.ToTable("formularios", "formularios");

                            b1.WithOwner()
                                .HasForeignKey("FormularioId");
                        });

                    b.Navigation("Modelo");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.Secao", "Secao")
                        .WithMany("Perguntas")
                        .HasForeignKey("SecaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Secao");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Alternativa", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta", "Pergunta")
                        .WithMany()
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.CaixaSelecao", null)
                        .WithMany("Alternativas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.ListaSuspensa", null)
                        .WithMany("Alternativas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.MultiplaEscolha", null)
                        .WithMany("Alternativas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Secao", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.Modelo", "Modelo")
                        .WithMany("Secoes")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.Resposta", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Respostas.Gabarito", "Gabarito")
                        .WithMany("Respostas")
                        .HasForeignKey("GabaritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta", "Pergunta")
                        .WithMany("Respostas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gabarito");

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("respostas-alternativas", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Modelos.Alternativa", null)
                        .WithMany()
                        .HasForeignKey("AlternativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Formularios.Respostas.RespostaObjetiva", null)
                        .WithMany()
                        .HasForeignKey("RespostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.FormularioGabarito", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Formularios.Formulario", "Formulario")
                        .WithMany("Gabaritos")
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Formulario", b =>
                {
                    b.Navigation("Gabaritos");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Abstractions.Pergunta", b =>
                {
                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Modelo", b =>
                {
                    b.Navigation("Secoes");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.Secao", b =>
                {
                    b.Navigation("Perguntas");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Respostas.Gabarito", b =>
                {
                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.CaixaSelecao", b =>
                {
                    b.Navigation("Alternativas");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.ListaSuspensa", b =>
                {
                    b.Navigation("Alternativas");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Formularios.Modelos.MultiplaEscolha", b =>
                {
                    b.Navigation("Alternativas");
                });
#pragma warning restore 612, 618
        }
    }
}
